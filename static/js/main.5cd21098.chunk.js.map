{"version":3,"sources":["genomeLib/snps.ts","features/appMain/snpsTable.tsx","features/appMain/appMain.tsx","features/appToolbar/AppToolbar.tsx","features/appVersion/AppVersion.tsx","App.tsx","features/appMain/appMainSlice.ts","app/store.ts","serviceWorker.ts","index.tsx"],"names":["SNPs","text","chrs","list","this","split","forEach","line","startsWith","items","map","v","trim","length","chr","toUpperCase","undefined","findIndex","match","Number","isNaN","push","id","bases","filter","file","fs","Promise","res","rej","err","data","obj","toString","Error","useStyles","makeStyles","theme","table","width","container","header","background","fontWeight","containerStyle","maxHeight","sortFunctions","ID","sortByID","Chromosome","a","b","dir","sortByTextField","Base","Frequency","Publications","SnpsTable","classes","useState","snps","setSnps","useEffect","Snps","snpList","sort","TableContainer","component","Paper","className","style","Table","size","stickyHeader","aria-label","SnpsTableHead","SnpsTableBody","v1","parseInt","substr","v2","type","TableHeaders","align","orderBy","setOrderBy","direction","setDirection","TableHead","TableRow","TableCell","TableSortLabel","active","onClick","TableBody","el","scope","target","href","root","height","padding","drop","borderWidth","borderStyle","borderColor","palette","primary","light","display","justifyContent","alignItems","flexDirection","dark","fontSize","color","textAlign","noDisplay","textExtensions","AppMain","setText","error","setError","onDrop","useCallback","files","some","ext","path","toLowerCase","endsWith","readFile","sanityCheck","name","useDropzone","getRootProps","getInputProps","isDragActive","Typography","reader","FileReader","onloadend","result","readAsText","indexOf","createStyles","flexGrow","toolbar","toolList","AppToolbar","URLSearchParams","window","location","search","get","AppBar","position","Toolbar","variant","version","left","bottom","main","ribbon","right","top","AppVersion","label","baseURL","forkme","src","alt","gitVersion","long","createMuiTheme","blue","secondary","default","withStyles","app","CssBaseline","slice","createSlice","initialState","population","reducers","setPopulation","state","action","payload","actions","store","configureStore","reducer","populationReducer","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.5cd21098.chunk.js","sourcesContent":["import * as fs from 'fs'\n\n\nexport interface snp {  // tslint:disable-line\n    id : string,\n    chr: string, \n    bases : string\n}\n\nexport default class SNPs {  // tslint:disable-line\n\n    private list : snp []\n\n    constructor ( text : string, chrs? : string[] ){\n        this.list = []\n        let lines = text.split('\\n')\n        lines.forEach((line)=>{\n            if( line.startsWith(\"rs\")) {\n                let items = line.split(\"\\t\").map((v)=>v.trim())\n                if( items.length === 4 ){\n                    let chr = items[1].toUpperCase()\n                    if( chrs === undefined || chrs.findIndex(v=>v===chr) >=0  ){\n                        if( items[3].match(/[AGCT]/) && !Number.isNaN(Number(items[2]))){\n                            this.list.push ({\n                                id : items[0],\n                                chr,\n                                bases : items[3].toUpperCase()\n                            })\n                        }\n                    }\n                }\n            }\n        })\n    }\n\n    get snpList() : snp [] {\n        return this.list\n    }\n\n    snpChromosome(chr:string) : snp [] {\n        chr = chr.trim().toUpperCase()\n        return this.list.filter((v)=>v.chr===chr)\n    }\n\n    static async fromFile( file : string ) : Promise<SNPs> {\n        if ( fs.existsSync(file)){\n            return new Promise((res,rej)=>{\n                fs.readFile(file, {}, (err, data)=>{\n                    if( err ) rej(err)\n                    let obj = new SNPs(data.toString())\n                    res(obj)\n                })\n            })\n        } else {\n            throw new Error(`file ${file} noy found!`)\n        }\n    }\n\n\n}","import React, { useEffect, useState } from \"react\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Snps ,{snp} from '../../genomeLib/snps'\nimport { Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, TableSortLabel } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n    table: {\n        width:\"100%\"\n      },\n      container: {\n      },\n      header :{\n          background:\"#FAFAFA\",\n          fontWeight: \"bold\"\n      }\n}))\n\n// need to use this mode for usign function calc\nconst containerStyle = {maxHeight: 'calc(100% - 2em)'}\n\ntype TableHeaderSortType = 'ID' | 'Chromosome' | 'Base' | 'Frequency' | 'Publications' \ntype AlignType = 'left' | 'right'\ntype SortDirection = 'asc' | 'desc'\ntype OnListSort = ( id : TableHeaderSortType, dir : SortDirection ) => void\ninterface TableHeader {\n    id : TableHeaderSortType,\n    align : AlignType\n    text : string\n}\nconst sortFunctions = {\n    ID : sortByID,\n    Chromosome : sortByChr,\n    Base : sortByBase,\n    Frequency : sortByID,\n    Publications : sortByID\n}\n\ninterface snpsTableProps { data : string }\n\nexport default function SnpsTable({ data } : snpsTableProps) {\n    const classes = useStyles();\n    const [snps, setSnps] = useState<snp[]>([])\n\n    useEffect(()=>{\n        let list = new Snps(data,[\"Y\",\"MT\"])\n        let snps = list.snpList.sort((a,b)=>sortFunctions.ID(a,b,'asc'))\n        setSnps(snps)\n    },[data])\n\n    const onSort = ( id : TableHeaderSortType, dir : SortDirection) =>{\n        let list = snps.sort((a,b)=>sortFunctions[id](a,b,dir))\n        setSnps([...list])\n    }\n\n    return (\n            <TableContainer component={Paper} className={classes.container} style={containerStyle}>\n                <Table className={classes.table} size=\"small\" stickyHeader aria-label=\"simple table\">\n                    <SnpsTableHead sort={onSort}/>\n                    <SnpsTableBody list={snps}/>\n                </Table>\n            </TableContainer>\n    )\n}\n\nfunction sortByID( a : snp, b : snp, dir : SortDirection ): number {\n    let v1 = parseInt(a.id.substr(2))\n    let v2 = parseInt(b.id.substr(2))\n    return  dir === 'asc' ? v1-v2 : v2-v1\n}\n\nfunction sortByChr( a : snp, b : snp, dir : SortDirection) : number {\n    return sortByTextField(a,b,dir,'chr')\n}\n\nfunction sortByBase(a : snp, b : snp, dir : SortDirection) : number {\n    return sortByTextField(a,b,dir,'bases')\n}\n\nfunction sortByTextField(a : snp, b : snp, dir : SortDirection, type : keyof snp) : number {\n    let v1 = a[type]\n    let v2 = b[type]\n    let d  = dir === 'asc' ? 1 : -1\n    return d *( v1>v2 ? 1 : -1)\n}\n\nconst TableHeaders : TableHeader [] = [\n    {\n        id : 'ID',\n        align : 'left',\n        text : \"SNP id\"\n    },\n    {\n        id : 'Chromosome',\n        align : 'right',\n        text : 'Chromosome'\n    },\n    {\n        id : 'Base',\n        align : 'right',\n        text : 'Base'\n    },\n    {\n        id : 'Frequency',\n        align : 'right',\n        text : 'Frequency'\n    },\n    {\n        id : 'Publications',\n        align :'right',\n        text : 'Publications'\n    }\n]\n\ninterface SnpsTableHeadProps {sort : OnListSort }\n\nfunction SnpsTableHead ({sort} : SnpsTableHeadProps) {\n    const classes = useStyles();\n    const [orderBy, setOrderBy] = useState<TableHeaderSortType>('ID')\n    const [direction, setDirection] = useState<SortDirection>('asc')\n    const onClick = (id : TableHeaderSortType) => {\n        let dir : SortDirection = 'asc'\n        if( orderBy === id ){\n            dir = direction === 'asc' ? 'desc' : 'asc'\n        } \n        setOrderBy(id)\n        setDirection(dir)\n        sort(id, dir)\n    }\n    return(\n        <TableHead>\n        <TableRow>\n            {\n                TableHeaders.map(header=>(\n                    <TableCell align={header.align}  className={classes.header} key={header.id}>\n                        <TableSortLabel\n                            active={orderBy===header.id}\n                            direction={direction}\n                            onClick={()=>onClick(header.id)}\n                            >\n                            {header.text}\n                        </TableSortLabel>\n                    </TableCell>\n                ))\n            }\n        </TableRow>\n      </TableHead>\n    )\n}\n\ninterface SnpsTableBodyProps { list : snp [] }\n\nfunction SnpsTableBody( { list } : SnpsTableBodyProps) {\n    return (\n        <TableBody>\n        {list.map((el) => (\n          <TableRow key={el.id}>\n            <TableCell component=\"th\" scope=\"row\"><a  target='_blank' href={`https://www.ncbi.nlm.nih.gov/snp/${el.id}`}>{el.id}</a></TableCell>\n            <TableCell align=\"right\">{el.chr}</TableCell>\n            <TableCell align=\"right\">{el.bases}</TableCell>\n            <TableCell align=\"right\">to do</TableCell>\n            <TableCell align=\"right\">to do </TableCell>\n          </TableRow>\n        ))}\n      </TableBody>\n    )\n}","import React, {useState, useCallback} from 'react'\nimport  { useDropzone } from \"react-dropzone\"\nimport { FileWithPath } from \"file-selector\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport AddIcon from '@material-ui/icons/Add';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\nimport Typography from '@material-ui/core/Typography';\nimport SnpTable from './snpsTable'\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n            width:'100%',\n            height:'100%',\n            padding:'4px'\n        },\n        drop :{\n            width:'100%',\n            height:'100%',\n            borderWidth:'2px',\n            borderStyle: 'dotted',\n            borderColor: theme.palette.primary.light,\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n            flexDirection: 'column',\n            \"&:hover\": {\n                borderColor: theme.palette.primary.dark\n              },\n            \"& .AddIcn\" :{\n                fontSize:80,\n                color: theme.palette.primary.light\n            },\n            \"&:hover .AddIcn\" :{\n                fontSize:80,\n                color: theme.palette.primary.dark\n            },\n            \"& .text\" :{\n            textAlign:'center',\n            color:theme.palette.primary.light \n            },\n            \"&:hover .text\" :{\n                textAlign:'center',\n                color:theme.palette.primary.dark \n            }\n        },\n        noDisplay : {\n            display:'none'\n        }\n    }))\n\n    const textExtensions = ['.txt']\n\n    export default function AppMain(){\n        const classes = useStyles();\n        const [text, setText] = useState<string|null>(null)\n        const [error, setError] = useState<string|null>(null)\n        const onDrop = useCallback(async (files: FileWithPath[]) =>  {\n            let list = files.filter((file)=>textExtensions.some((ext)=>file.path?.toLowerCase().endsWith(ext)))\n            if( list.length > 0 ) {\n                let file = list[0]\n                let data = await readFile(file)\n                if( sanityCheck(data)){\n                    setText(data)\n                } else {\n                    setText(null)\n                    setError(`${file.name} is not valid`)\n                }\n            } else {\n                setText(null)\n                setError(`unable to load ${files[0].name}`)\n            }\n        }, [setText])\n        const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\n\n    \n        return (\n            <div className={classes.root}>\n                    <div {...getRootProps()} className={classes.root}>\n                            <div className={ isDragActive ? classes.drop : classes.noDisplay}>\n                                <ArrowDownwardIcon className=\"AddIcn\"/>\n                                <Typography className=\"text\">Drop the file here.</Typography>\n                            </div> \n                            {\n                                text !== null ?\n                                <>\n                                    <SnpTable data={text}/>\n                                </> :\n                                <div className={isDragActive ? classes.noDisplay : classes.drop}>\n                                    <input {...getInputProps()} />\n                                    <AddIcon className=\"AddIcn\"/>\n                                    {\n                                        error !== null ?\n                                        <>\n                                            <Typography className=\"text\">🖐 {error}</Typography>\n                                        </> :\n                                        <></>\n                                    }   \n                                    <>\n                                        <Typography className=\"text\">Drag and Drop here your 23andme txt file.</Typography>\n                                        <Typography className=\"text\">or click here to select the file.</Typography>\n                                    </>\n                                </div> \n                            }\n                    </div>\n            </div>\n        )\n    }\n\n    async function readFile ( file : FileWithPath ) : Promise<string> {\n        return new Promise((res)=>{\n            let reader = new FileReader()\n            reader.onloadend = ()=> res(reader.result as string)\n            reader.readAsText(file)\n        })\n    }\n\n    // Sanity check that the file is a valid\n    // 23andme SNP file.\n    const key1 = \"This data file generated by 23andMe\"\n    const key2 = \"# rsid\tchromosome\tposition\tgenotype\"\n    function sanityCheck(data:string) : boolean {\n        return data.indexOf(key1) > 0 && data.indexOf(key2) > 0\n    }\n","import React from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1\n    },\n    toolbar : {\n      display:'flex',\n      justifyContent:'space-between'\n    },\n    toolList : {\n      display:'flex',\n      alignItems:'center'\n    }\n  }),\n);\n\nexport default function AppToolbar() {\n  const classes = useStyles();\n  const showButtons = new URLSearchParams(window.location.search).get('all') != null\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar variant=\"dense\" className={classes.toolbar}>\n            <Typography variant=\"h6\" color=\"inherit\">\n              SNPs and Me \n            </Typography>\n          <div className={classes.toolList}>\n          </div>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}","import React from \"react\";\nimport gitVersion from '../../tools/gitInfo.json'\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n    version: {\n        position: 'absolute', \n        left: '14px', \n        bottom: '0px',\n        fontSize : '12px',\n        color : theme.palette.primary.main\n    },\n    ribbon :{\n        position: 'absolute', \n        right: '0px', \n        top: '0px'\n    }\n}))\n\n\ntype gitInfoProps = { label : string, baseURL? : string, forkme : Boolean }\n\nconst  AppVersion = ({label, baseURL, forkme}:gitInfoProps) => {\n        const classes = useStyles();\n        const handleClick = () => {\n            if( baseURL && gitVersion.long !== \"\" )  window.location.href = baseURL+'/tree/'+gitVersion.long;\n        }\n        return ( \n            <>\n            {forkme && baseURL && (\n                <div className={classes.ribbon}> \n                    <a href={baseURL}>\n                        <img width=\"100\" height=\"100\" src=\"https://github.blog/wp-content/uploads/2008/12/forkme_right_red_aa0000.png?resize=100%2C100\" alt=\"Fork me on GitHub\"/>\n                    </a>\n                </div>\n            ) }\n            <div className={classes.version} onClick={handleClick}>\n                <p>{label + gitVersion.version}</p>\n            </div>\n            </>\n        )\n}\n\nexport default AppVersion;","import React from \"react\";\nimport {\n  createMuiTheme,\n  withStyles,\n  createStyles,\n  Theme,\n  WithStyles,\n  StyleRules\n} from \"@material-ui/core/styles\";\nimport {\n  MuiThemeProvider,\n  CssBaseline,\n} from \"@material-ui/core\";\nimport blue from \"@material-ui/core/colors/blue\";\nimport AppMain from  './features/appMain/appMain';\nimport AppToolbar from './features/appToolbar/AppToolbar'\nimport AppVersion from './features/appVersion/AppVersion'\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: blue,\n    secondary: {\n      main: \"#fff\"\n    },\n    background: {\n      default: \"#fff\"\n    }\n  }\n});\n\nconst styles: (theme: Theme) => StyleRules<string> = theme =>\n  createStyles({\n    app: {\n      textAlign: \"center\" \n    },\n    main :{\n      position:'absolute',\n      top:'55px',\n      right: '0px',\n      left:'0px',\n      bottom: '0px',\n      background : 'white',\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n    }\n  });\n\ntype AppProps = {} & WithStyles<typeof styles>;\n\nconst App = ({ classes }: AppProps) => (\n  <MuiThemeProvider theme={theme}>\n    <CssBaseline />\n    <div className={classes.app}>\n      <AppToolbar/>\n      <div className={classes.main}>\n        <AppMain />\n      </div>\n      <AppVersion label=\"version : \" forkme={false} baseURL=\"https://github.com/VittorioAccomazzi/Artist\" />\n    </div>\n  </MuiThemeProvider>\n);\n\nexport default withStyles(styles)(App);\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState } from '../../app/store'\n\n\nexport type PopulationType = 'European' | 'African' | 'EAsian' |  'SAsian'  \n\ninterface PopulationTypeState {\n    population : PopulationType\n  }\n  \n  const initialState: PopulationTypeState = {\n    population : 'European'\n  };\n\n  export const slice = createSlice({\n    name: 'PopulationType',\n    initialState,\n    reducers: {\n        setPopulation : ( state, action : PayloadAction<PopulationType> ) => {\n            state.population = action.payload\n        }\n      }\n    })\n  \n  export const { setPopulation} = slice.actions;\n  export const selecPopulation= (state: RootState) => state.population.population\n  export default slice.reducer;","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport populationReducer from '../features/appMain/appMainSlice';\n\nexport const store = configureStore({\n  reducer: {\n    population: populationReducer,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}